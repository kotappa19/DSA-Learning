class Solution { // Time: O(n), Space: O(1)
    public int leastInterval(char[] tasks, int n) {
        int freq[] = new int[26];
        for(char c : tasks) {
            freq[c-'A']++;
        }

        Arrays.sort(freq);

        // store the maximum freq
        int max = freq[25]-1; // -1 bcoz last element doesn't need idle slot

        int idles = max * n;

        // remove idle slots based on freq, start from max freq to get the minimum time
        for(int i = freq.length-2; i >= 0 && freq[i] != 0; i--) {
            idles -= Math.min(max, freq[i]);
        }

        return idles > 0 ? idles + tasks.length : tasks.length;
    }
}
