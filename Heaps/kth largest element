class Solution { // Time: O(n log k), Space: O(k)
    public int findKthLargest(int[] nums, int k) {
        // elements are stored in increasing order
		PriorityQueue<Integer> minHeap = new PriorityQueue<>();
		for(int i = 0; i < nums.length; i++) {
			minHeap.add(nums[i]);
			// remove smallest element from the heap so that result contains only k largest elements
			if(minHeap.size() > k) {
				minHeap.poll();
			}
		}
		return minHeap.peek();
    }
}
