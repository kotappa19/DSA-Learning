/************************************************************

 Following is the Binary Tree node structure:

 class TreeNode {
     int data;
     TreeNode left;
     TreeNode right;

     TreeNode(int data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
 }

 ************************************************************/

import java.util.ArrayList;
import java.util.List;

public class Solution { //Time: O(n), Space: O(n)

    public static void leftBoundary(TreeNode root, List<Integer> res) {
        if(root == null) {
            return;
        }
        if(root.left != null) {
            res.add(root.data);
            leftBoundary(root.left, res);
        } else if(root.right != null) {
            res.add(root.data);
            leftBoundary(root.right, res);
        }
    }

    public static void leafNodes(TreeNode root, List<Integer> res) {
        if(root == null) {
            return;
        }
        leafNodes(root.left, res);
        if(root.left == null && root.right == null) res.add(root.data);
        leafNodes(root.right, res);
    }

    public static void rightBoundary(TreeNode root, List<Integer> res) {
        if(root == null) {
            return;
        }
        if(root.right != null) {
            rightBoundary(root.right, res);
        } else {
            rightBoundary(root.left, res);
        }
        if(root.left != null || root.right != null) {
            res.add(root.data);
        }
    }

    public static List<Integer> traverseBoundary(TreeNode root){
        // Write your code here.
        List<Integer> res = new ArrayList<>();
        res.add(root.data);
        if(root.left == null && root.right == null) {
            return res;
        }
        leftBoundary(root.left, res);
        leafNodes(root, res);
        rightBoundary(root.right, res);
        return res;
    }
}
