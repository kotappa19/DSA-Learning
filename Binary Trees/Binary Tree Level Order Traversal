/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        // queue to maintain that siblings process first then children
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        List<Integer> list = new ArrayList<>();
        while(!q.isEmpty()) {
            TreeNode node = q.remove();
            if(node != null) {
                // add node val to list
                list.add(node.val);
                // add its children
                if(node.left != null) {
                    q.add(node.left);
                }
                if(node.right != null) {
                    q.add(node.right);
                }
            } else {
                // add list to two D list
                res.add(new ArrayList<>(list));
                list.clear();
                // all elements are covered
                if(q.isEmpty()) {
                    break;
                } else {
                    // adding null is to track the next line
                    q.add(null);
                }
            }
        }
        return res;
    }
}
